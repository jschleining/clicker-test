angular.module('ClickerApp')

.factory('Generator', ['$rootScope', function ($rootScope) {

	var Generator = function(_params)
	{
		this.unlocked = false; // TODO: add visible, so i can have visible generators with blacked out icon before purchase
		this.unlockEventHandler = null;
		this.upgradeEventHandler = null;
		this.tickEventHandler = null;

		this.baseCostMultiplier = 1.13;
		this.currentCostMultiplier = 1.13;
		this.costMultiplierAdd = .01;

		this.maxAllowed = 99999; 	// TODO: set up baseMaxAllowed, XP for generator, level for generator.
									//			-add to base max allowed at each level. add achievements for levels
									//			as well as 'alliances' between overlords once unlocked.
									// 			-also achievements for overlord level / prestige level
									// 			-higher level generators sacrifice several of a lower 
									//			level tier + cash to purchase

		this.owned = 0;
		this.combinedWPS = 0; // total WPS generated by all generators of this type after upgrades
		this.totalGenerated = 0; // total Widgets generated by this generator

		this.init.call(this, _params);
	};
	Generator.prototype = {
		init : function(_params)
		{
			this.id = _params._id;
			this.name = _params._name;
			this.description = _params._description;
			this.baseCost = _params._cost;
			this.baseWPS = _params._wps;

			// Presently Generators are unlocked only by obtaining a 
			// 	minimum number of the previous tier of Generator
			this.unlockGeneratorID = _params._unlockGeneratorID;
			this.unlockQuantity = _params._unlockQuantity;
			this.unlockMessage = _params._unlockQuantity;
			
			this.modifiedWPS = _params._wps; // wps one generator creates after upgrades

			this.currentCost = [
				{qty: 1, type: 'value', cost: _params._cost, newCostMult : this.currentCostMultiplier, allowed : true},	// setting up to allow percent later. first priority - percent of max allowed
				{qty: 10, type: 'value', cost: 0, newCostMult : 0, allowed : true}, 			//		second priority, amount of widgets the player has
				{qty: 25, type: 'value', cost: 0, newCostMult : 0, allowed : true}//,
				//{qty: 0, type: 'max', cost: 0, newCostMult : 0, allowed: true} // max the player can purchase that is less than max allowed and also
																	// max the player can purchase based on current widgets
			];
			this.costIndex = 0; // currently selected cost/quantity.

			this.upgrades = [];

			if(_params._id === _params._unlockGeneratorID)
			{
				this.unlocked = true;
			}

			this.calculateCost();
			this.addEventListeners();
		},
		GetID : function(){return this.id;},
		GetName : function(){return this.name;},
		GetDescription : function(){return this.description;},
		GetIsUnlocked : function(){return this.unlocked;},
		GetOwned : function(){return this.owned;},
		GetQuantity : function(_index){return this.currentCost[_index].qty;},
		GetCost : function(_index){return this.currentCost[_index].cost;},
		GetCostOptionsLength : function(){return this.currentCost.length;},
		GetModifiedWPS : function(){return this.modifiedWPS;},
		GetCombinedWPS : function(){return this.combinedWPS;},
		GetTotalGenerated : function(){return this.totalGenerated;},

		buy : function(_index, _widgets)
		{
			if(this.currentCost[_index].allowed)
			{
				if(_widgets >= this.currentCost[_index].cost)
				{
					this.owned += this.currentCost[_index].qty;
					this.costMultiplier = this.currentCost[_index].newCostMult;
					
					this.updateWPS();

					// broadcast updates
					$rootScope.$emit('WIDGETS_SPENT', this.currentCost[_index].cost);
					$rootScope.$emit('GENERATOR_PURCHASE', {
						//{id : 0, owned : 0, upgrades : [{id : 0}], wps : 0, generated : 0}
						id : this.id,
						owned : this.owned,
						wps : this.combinedWPS
					});
					$rootScope.$emit('GENERATOR_' + this.id + '_PURCHASE', {owned : this.owned, purchased : this.currentCost[_index].qty});
					$rootScope.$emit('GENERATOR_UPDATE');
					
					this.calculateCost();
				}
				else
				{
					// return insufficient widgets error
				}
			}
		},

		getCurrentCostAndMultiplier : function()
		{
			var cost = this.baseCost;
			var costMult = this.baseCostMultiplier;

			for(var i = 0; i < this.owned; i++)
			{
				cost = Math.round(cost * costMult);
				costMult += this.costMultiplierAdd;
			}

			return {cost: cost, mult: costMult};
		},

		calculateCost : function() // calculate the cost to purchase
		{
			var currentCostArray = this.currentCost;
			var currentCostAndMult = this.getCurrentCostAndMultiplier();

			for(var i = 0; i < currentCostArray.length; i++)
			{
				var cost = currentCostAndMult.cost;
				var costMult = currentCostAndMult.mult;
				var allowed = true;

				if(currentCostArray[i].qty > 0)
				{
					if(this.owned + currentCostArray[i].qty <= this.maxAllowed)
					{
						if(currentCostArray[i].qty != 1)
						{
							var totalCost = cost;
							for(var j = 0; j < currentCostArray[i].qty - 1; j++)
							{
								cost = Math.round(cost * costMult);
								totalCost += cost;
								costMult += this.costMultiplierAdd;
							}
							cost = totalCost;
						}
					}
					else
					{
						cost = null;
						costMult = null;
						allowed = false;
					}
				}
				else // TODO: calculate max purchase.
				{

				}
				
				currentCostArray[i].cost = cost;
				currentCostArray[i].newCostMult = costMult;
				currentCostArray[i].allowed = allowed;
			}

			this.currentCost = currentCostArray;
		},

		updateWPS : function()
		{
			this.combinedWPS = this.modifiedWPS * this.owned;
		},

		addUpgrade : function(_upgradeInfo)
		{

			this.upgrades.push(_upgradeInfo);
			this.updateGeneratorWPS();

			// broadcast update for main controller
			$rootScope.$emit('GENERATOR_UPDATE');
		},

		updateGeneratorWPS : function()
		{
			this.modifiedWPS = this.baseWPS;
			var bwps = this.baseWPS;
			
			for(var i = 0; i < this.upgrades.length; i++)
			{
				if(this.upgrades[i].type === 'Add')
				{
					bwps += this.upgrades[i].value;
				}
			}
			
			for(var i = 0; i < this.upgrades.length; i++)
			{
				if(this.upgrades[i].type === 'Multiply')
				{
					bwps *= this.upgrades[i].value;
				}
			}

			this.modifiedWPS = Math.round(bwps);
			this.updateWPS();
		},

		updateTicks : function()
		{
			this.totalGenerated += this.combinedWPS;
		},

		load : function(_data)
		{
			// quantity, upgrade array, total generated, unlocked
		},

		addEventListeners : function()
		{
			var _this = this;
			if(!this.unlocked)
			{
				this.unlockEventHandler = 	$rootScope.$on('GENERATOR_' + this.unlockGeneratorID + '_PURCHASE', function(event, _data) {
												if(_data.owned >= _this.unlockMessage)
												{
													_this.unlocked = true;
													_this.unlockMessage = null;
													_this.unlockEventHandler();
												}
											});
			}
			

			this.upgradeEventHandler = 	$rootScope.$on('GENERATOR_' + this.id + '_UPGRADE_PURCHASE', function(event, data) {
											_this.addUpgrade(data);
										});

			this.tickEventHandler =	$rootScope.$on('TICK_FULL', function(event) {
											_this.updateTicks();
										});
		}
	};

	return Generator;
}]);
